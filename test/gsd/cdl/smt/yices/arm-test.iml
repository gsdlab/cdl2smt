
package CYGPKG_HAL{
  display "eCos HAL"
  requires [CYGPKG_INFRA ]

  component CYGPKG_HAL_COMMON{
    display "Platform-independent HAL options"
    flavor none 

    option CYGFUN_HAL_COMMON_KERNEL_SUPPORT{
      display "Provide eCos kernel support"
      requires [CYGPKG_KERNEL ]
      default_value [CYGPKG_KERNEL ]
    }

    option CYGPKG_HAL_EXCEPTIONS{
      display "HAL exception support"
      requires [CYGPKG_KERNEL_EXCEPTIONS ]
      default_value [CYGPKG_KERNEL_EXCEPTIONS ]
    }

    option CYGSEM_HAL_STOP_CONSTRUCTORS_ON_FLAG{
      display "Stop calling constructors early"
      requires [CYGSEM_LIBC_INVOKE_DEFAULT_STATIC_CONSTRUCTORS ]
      default_value [0 ]
    }

    interface CYGINT_HAL_SUPPORTS_MMU_TABLES{
      display "HAL uses the MMU and allows for CDL manipulation of it's use"
    }

    option CYGSEM_HAL_INSTALL_MMU_TABLES{
      display "Install MMU tables."
      default_value [CYG_HAL_STARTUP != "RAM" ]
      active_if [CYGINT_HAL_SUPPORTS_MMU_TABLES ]
    }

    option CYGSEM_HAL_STATIC_MMU_TABLES{
      display "Use static MMU tables."
      default_value [0 ]
      requires [CYGSEM_HAL_INSTALL_MMU_TABLES ]
    }

    component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN{
      display "Route diagnostic output to debug channel"
      default_value [(CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS || CYG_HAL_STARTUP == "RAM") ? 1 : 0 ]
      active_if [!CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE ]
      active_if [CYGPKG_HAL_ARM || CYGPKG_HAL_POWERPC_MPC8xx || CYGPKG_HAL_V85X_V850 || CYGSEM_HAL_VIRTUAL_VECTOR_DIAG ]

      option CYGSEM_HAL_DIAG_MANGLER{
        display "Mangler used on diag output"
        legal_values ["GDB" "None" ]
        default_value ["GDB" ]
        flavor data 
      }
    }

    component CYGBLD_HAL_LINKER_GROUPED_LIBS{
      display "Grouped libraries for linking"
      default_value [CYGBLD_HAL_LINKER_GROUPED_LIBS_DEFAULT ]
      requires [is_substr(CYGBLD_HAL_LINKER_GROUPED_LIBS, "libtarget.a") ]
      flavor data 

      option CYGBLD_HAL_LINKER_GROUPED_LIBS_DEFAULT{
        display "Default setting"
        default_value ["libtarget.a libgcc.a libsupc++.a" ]
        flavor data 
      }
    }
  }

  component CYGPKG_HAL_COMMON_INTERRUPTS{
    display "HAL interrupt handling"
    flavor none 

    option CYGIMP_HAL_COMMON_INTERRUPTS_USE_INTERRUPT_STACK{
      display "Use separate stack for interrupts"
      default_value [1 ]
    }

    option CYGNUM_HAL_COMMON_INTERRUPTS_STACK_SIZE{
      display "Interrupt stack size"
      default_value [CYGPKG_KERNEL ? 4096 : 32768 ]
      legal_values [128 to 1048576 ]
      flavor data 
    }

    option CYGSEM_HAL_COMMON_INTERRUPTS_ALLOW_NESTING{
      display "Allow nested interrupts"
      default_value [0 ]
    }

    option CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT{
      display "Save minimum context on interrupt"
      default_value [1 ]
    }

    option CYGIMP_HAL_COMMON_INTERRUPTS_CHAIN{
      display "Chain all interrupts together"
      default_value [0 ]
    }

    option CYGIMP_HAL_COMMON_INTERRUPTS_IGNORE_SPURIOUS{
      display "Ignore spurious [fleeting] interrupts"
      default_value [0 ]
    }
  }

  component CYGPKG_HAL_COMMON_CONTEXT{
    display "HAL context switch support"
    flavor none 

    option CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM{
      display "Use minimum thread context"
      default_value [1 ]
    }
  }

  component CYGPKG_HAL_CACHE_CONTROL{
    display "Explicit control over cache behaviour"
    flavor none 

    component CYGSEM_HAL_ENABLE_DCACHE_ON_STARTUP{
      display "Enable DATA cache on startup"
      default_value [1 ]

      option CYGSEM_HAL_DCACHE_STARTUP_MODE{
        display "DATA cache mode on startup"
        legal_values ["COPYBACK" "WRITETHRU" ]
        default_value ["COPYBACK" ]
        flavor data 
      }
    }

    option CYGSEM_HAL_ENABLE_ICACHE_ON_STARTUP{
      display "Enable INSTRUCTION cache on startup"
      default_value [1 ]
    }
  }

  component CYGPKG_HAL_DEBUG{
    display "Source-level debugging support"
    flavor none 

    interface CYGINT_HAL_DEBUG_GDB_STUBS{
      display "Support for GDB stubs"
    }

    option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS{
      display "Include GDB stubs in HAL"
      active_if [CYGINT_HAL_DEBUG_GDB_STUBS ]
      default_value [0 ]
      requires [! CYGSEM_HAL_USE_ROM_MONITOR ]
      requires [! CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT ]
      requires [! CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM ]
      requires [!CYGSEM_HAL_VIRTUAL_VECTOR_DIAG || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS ]
    }

    interface CYGINT_HAL_DEBUG_GDB_STUBS_BREAK{
      display "Support for external break support in GDB stubs"
    }

    option CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT{
      display "Include GDB external break support for stubs"
      active_if [CYGINT_HAL_DEBUG_GDB_STUBS_BREAK ]
      requires [CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
      default_value [CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
    }

    interface CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED{
      display "Platform does not support CTRLC"
    }

    option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT{
      display "Include GDB external break support when no stubs"
      requires [!CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT ]
      active_if [CYGSEM_HAL_USE_ROM_MONITOR || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
      active_if [CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED == 0 ]
      default_value [!CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
    }

    option CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT{
      display "Include GDB multi-threading debug support"
      active_if [CYGSEM_HAL_ROM_MONITOR || CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT ]
      default_value [1 ]
    }

    option CYGNUM_HAL_DEBUG_GDB_PROTOCOL_RETRIES{
      display "Number of times to retry sending a $O packet"
      default_value [0 ]
      flavor data 
    }

    option CYGNUM_HAL_DEBUG_GDB_PROTOCOL_TIMEOUT{
      display "Timeout period for GDB packets"
      default_value [500 ]
      flavor data 
    }

    option CYGDBG_HAL_CRCTABLE_LOCATION{
      display "Location of CRC32 table"
      legal_values ["ROM" "RAM" ]
      default_value ["RAM" ]
      flavor data 
    }
  }

  component CYGPKG_HAL_ROM_MONITOR{
    display "ROM monitor support"
    flavor none 

    interface CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT{
      display "Target has virtual vector support"
    }

    interface CYGINT_HAL_VIRTUAL_VECTOR_COMM_BAUD_SUPPORT{
      display "Target supports baud rate control via vectors"
    }

    component CYGSEM_HAL_VIRTUAL_VECTOR_SUPPORT{
      display "Enable use of virtual vector calling interface"
      active_if [CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT ]
      calculated [1 ]

      option CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE{
        display "Inherit console settings from ROM monitor"
        active_if [CYGSEM_HAL_USE_ROM_MONITOR ]
        default_value [!CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS ]
      }

      option CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE{
        display "Debug channel is configurable"
        calculated [CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS ]
      }

      option CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE{
        display "Console channel is configurable"
        calculated [!CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE && !CYGDBG_HAL_DIAG_TO_DEBUG_CHAN ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE{
        display "Initialize whole of virtual vector table"
        default_value [CYG_HAL_STARTUP != "RAM" || !CYGSEM_HAL_USE_ROM_MONITOR ]
        requires [CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET ]
        requires [CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US ]
        requires [CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA ]
        requires [CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT{
        display "Claim virtual vector table entries by default"
        active_if [!CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE ]
        default_value [1 ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET{
        display "Claim reset virtual vectors"
        default_value [CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_VERSION{
        display "Claim version virtual vectors"
        default_value [CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US{
        display "Claim delay_us virtual vector"
        default_value [CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA{
        display "Claim data virtual vectors"
        default_value [CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS{
        display "Claim comms virtual vectors"
        default_value [CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
      }

      option CYGSEM_HAL_VIRTUAL_VECTOR_DIAG{
        display "Do diagnostic IO via virtual vector table"
        calculated [1 ]
      }
    }

    option CYGSEM_HAL_ROM_MONITOR{
      display "Behave as a ROM monitor"
      default_value [0 ]
      requires [CYG_HAL_STARTUP == "ROM" || CYG_HAL_STARTUP == "ROMRAM" ]
      flavor bool 
    }

    option CYGSEM_HAL_USE_ROM_MONITOR{
      display "Work with a ROM monitor"
      default_value [(CYG_HAL_STARTUP == "RAM" && !CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS && !CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED && !CYGSEM_HAL_POWERPC_COPY_VECTORS) ? 1 : 0 ]
      requires [CYG_HAL_STARTUP == "RAM" ]
      requires [! CYGSEM_HAL_POWERPC_COPY_VECTORS ]
      requires [! CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
      requires [! CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED ]
      flavor bool 
    }
  }

  interface CYGINT_HAL_PLF_IF_INIT{
    display "Platform defined I/O channels."
  }

  interface CYGINT_HAL_PLF_IF_IDE{
    display "Platform IDE I/O support."
  }

  option CYGPKG_HAL_GDB_FILEIO{
    display "File I/O operations via GDB"
    default_value [0 ]
    active_if [CYGSEM_REDBOOT_BSP_SYSCALLS ]
    requires [CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ]
  }

  option CYGPKG_HAL_BUILD_COMPILER_TESTS{
    display "Build Compiler sanity checking tests"
  }

  component CYGPKG_HAL_TESTS{
    display "Common HAL tests"
    calculated ["tests/context tests/basic" . ((!CYGINT_HAL_TESTS_NO_CACHES) ? " tests/cache" : "") . ((CYGPKG_HAL_BUILD_COMPILER_TESTS) ? " tests/cpp1 tests/vaargs" : "") . ((!CYGVAR_KERNEL_COUNTERS_CLOCK) ? " tests/intr" : "") ]
    flavor data 

    interface CYGINT_HAL_TESTS_NO_CACHES{
      display "Interface for cache presence"
      flavor booldata 
    }
  }

  package CYGPKG_HAL_POWERPC{
    display "PowerPC architecture"

    interface CYGINT_HAL_POWERPC_VARIANT{
      display "Number of variant implementations in this configuration"
      requires [1 == CYGINT_HAL_POWERPC_VARIANT ]
    }

    option CYGSEM_HAL_POWERPC_RESET_USES_JUMP{
      display "RESET vector jumps to startup"
      default_value [0 ]
    }

    option CYGSEM_HAL_POWERPC_COPY_VECTORS{
      display "Copy exception vectors to RAM"
      default_value [(CYG_HAL_STARTUP != "RAM" || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS) ? 1 : 0 ]
      requires [! CYGSEM_HAL_USE_ROM_MONITOR ]
    }

    option CYGHWR_HAL_POWERPC_NEED_VECTORS{
      display "Exception vectors inclusion"
      calculated [((CYGHWR_HAL_POWERPC_FORCE_VECTORS || CYG_HAL_STARTUP != "RAM" || CYGSEM_HAL_POWERPC_COPY_VECTORS) && ! CYGSEM_HAL_USE_ROM_MONITOR) ? 1 : 0 ]
    }

    option CYGHWR_HAL_POWERPC_VECTOR_BASE{
      display "Exception vectors location"
      calculated [(! CYGHWR_HAL_POWERPC_FORCE_VECTOR_BASE_LOW && (CYGHWR_HAL_POWERPC_FORCE_VECTOR_BASE_HIGH || (CYG_HAL_STARTUP != "RAM" && ! CYGSEM_HAL_POWERPC_COPY_VECTORS))) ? 0xfff00000 : 0x00000000 ]
      flavor data 
    }

    option CYGHWR_HAL_POWERPC_ENABLE_MMU{
      display "Enable MMU"
      default_value [!CYGHWR_HAL_POWERPC_DISABLE_MMU ]
    }

    option CYGDBG_HAL_POWERPC_FRAME_WALLS{
      display "Exception stack-frame walls"
      default_value [0 ]
    }

    option CYGSEM_REDBOOT_HAL_LINUX_BOOT{
      display "Support booting Linux via RedBoot"
      active_if [CYGSEM_REDBOOT_PLF_LINUX_BOOT == 1 ]
      default_value [1 ]
      flavor bool 
    }

    component CYGPKG_HAL_POWERPC_OPTIONS{
      display "PowerPC build options"
      flavor none 

      option CYGPKG_HAL_POWERPC_CFLAGS_ADD{
        display "Additional compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_HAL_POWERPC_CFLAGS_REMOVE{
        display "Suppressed compiler flags"
        default_value ["" ]
        flavor data 
      }

      option CYGPKG_HAL_POWERPC_TESTS{
        display "PowerPC tests"
        calculated ["" ]
        flavor data 
      }
    }

    option CYGBLD_LINKER_SCRIPT{
      display "Linker script"
      calculated ["src/powerpc.ld" ]
      flavor data 
    }

    package CYGPKG_HAL_POWERPC_MPC8xx{
      display "PowerPC 8xx variant HAL"
      implements [CYGINT_PROFILE_HAL_TIMER ]

      interface CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED{
        display "ROM monitor configuration is unsupported"
      }

      option CYGSEM_HAL_USE_ROM_MONITOR_GDB_stubs{
        display "Bad CDL workaround"
        calculated [1 ]
        active_if [CYGSEM_HAL_USE_ROM_MONITOR ]
      }

      component CYGHWR_HAL_POWERPC_MPC8XX{
        display "PowerPC 8xx microprocessor family"
        legal_values ["823" "850" "852T" "855T" "860" "860T" "862T" "862P" "866T" ]
        default_value [860 ]
        implements [CYGINT_HAL_POWERPC_VARIANT ]
        flavor data 

        option CYGHWR_HAL_POWERPC_FPU{
          display "Variant FPU support"
          calculated [0 ]
        }

        option CYGPKG_HAL_POWERPC_MSBFIRST{
          display "CPU Variant big-endian"
          calculated [1 ]
        }

        component CYGSEM_HAL_POWERPC_MPC860_CPM_ENABLE{
          display "Enable CPM interrupts"
          default_value [1 ]

          option CYGHWR_HAL_POWERPC_MPC860_CPM_LVL{
            display "CPM interrupt level on the SIU"
            legal_values [0 to 7 ]
            default_value [7 ]
            flavor data 
          }
        }
      }

      option CYGPKG_HAL_POWERPC_MPC8xx_TESTS{
        display "PowerPC MPC8xx tests"
        calculated ["tests/intr0" ]
        flavor data 
      }

      option CYGBLD_BUILD_VERSION_TOOL{
        display "Build MPC8xx version dump tool"
        default_value [0 ]
        requires [CYG_HAL_STARTUP == "RAM" ]
      }
    }

    package CYGPKG_HAL_POWERPC_ADDER{
      display "A&M ADDER PowerPC evaluation board"
      requires [CYGPKG_HAL_POWERPC_MPC8xx ]
      requires [CYGPKG_IO_FLASH implies CYGPKG_DEVS_FLASH_AMD_AM29XXXXX_V2 ]
      implements [CYGHWR_DEVS_FLASH_AMD_AM29XXXXX_V2_CACHED_ONLY ]
      implements [CYGINT_HAL_DEBUG_GDB_STUBS ]
      implements [CYGINT_HAL_DEBUG_GDB_STUBS_BREAK ]
      implements [CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT ]

      component CYGPKG_HAL_POWERPC_ADDER_MODEL{
        display "Adder model"
        requires [CYGHWR_HAL_POWERPC_ADDER_I | CYGHWR_HAL_POWERPC_ADDER_II ]
        default_value [1 ]

        option CYGHWR_HAL_POWERPC_ADDER_I{
          display "Adder-I with 850"
          requires [!CYGHWR_HAL_POWERPC_ADDER_II ]
          requires [CYGHWR_HAL_POWERPC_MPC8XX == "850" ]
          default_value [0 ]
          implements [CYGNUM_HAL_QUICC_SMC2 ]
          implements [CYGNUM_HAL_QUICC_SCC3 ]
        }

        option CYGHWR_HAL_POWERPC_ADDER_II{
          display "Adder-II with 852T"
          requires [!CYGHWR_HAL_POWERPC_ADDER_I ]
          requires [CYGHWR_HAL_POWERPC_MPC8XX == "852T" ]
          default_value [0 ]
          implements [CYGNUM_HAL_QUICC_SMC1 ]
          implements [CYGNUM_HAL_QUICC_SCC3 ]
        }
      }

      component CYG_HAL_STARTUP{
        display "Startup type"
        legal_values ["RAM" "ROM" "ROMRAM" ]
        default_value ["RAM" ]
        flavor data 
      }

      option CYGHWR_HAL_POWERPC_BOARD_SPEED{
        display "Development board clock speed (MHz)"
        legal_values [47 48 50 100 ]
        default_value [(CYGHWR_HAL_POWERPC_ADDER_I ? 47 : 48) ]
        requires [(CYGHWR_HAL_POWERPC_ADDER_I && (CYGHWR_HAL_POWERPC_BOARD_SPEED == 47)) || (CYGHWR_HAL_POWERPC_ADDER_II && (CYGHWR_HAL_POWERPC_BOARD_SPEED != 47)) ]
        flavor data 
      }

      component CYGNUM_HAL_RTC_CONSTANTS{
        display "Real-time clock constants."
        flavor none 

        option CYGNUM_HAL_RTC_NUMERATOR{
          display "Real-time clock numerator"
          default_value [1000000000 ]
          flavor data 
        }

        option CYGNUM_HAL_RTC_DENOMINATOR{
          display "Real-time clock denominator"
          default_value [100 ]
          flavor data 
        }

        option CYGNUM_HAL_RTC_PERIOD{
          display "Real-time clock period"
          default_value [(((10*1000000)/4)/CYGNUM_HAL_RTC_DENOMINATOR) ]
          flavor data 
        }
      }

      component CYGPKG_HAL_POWERPC_ADDER_OPTIONS{
        display "ADDER build options"
        flavor none 

        option CYGPKG_HAL_POWERPC_ADDER_CFLAGS_ADD{
          display "Additional compiler flags"
          default_value ["" ]
          flavor data 
        }

        option CYGPKG_HAL_POWERPC_ADDER_CFLAGS_REMOVE{
          display "Suppressed compiler flags"
          default_value ["" ]
          flavor data 
        }

        option CYGPKG_HAL_POWERPC_ADDER_TESTS{
          display "ADDER tests"
          default_value ["" ]
          flavor data 
        }
      }

      component CYGHWR_MEMORY_LAYOUT{
        display "Memory layout"
        calculated [CYG_HAL_STARTUP == "RAM" ? "powerpc_adder_ram" : CYG_HAL_STARTUP == "ROMRAM" ? "powerpc_adder_romram" : "powerpc_adder_rom" ]
        flavor data 

        option CYGHWR_MEMORY_LAYOUT_LDI{
          display "Memory layout linker script fragment"
          calculated [CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_powerpc_adder_ram.ldi>" : CYG_HAL_STARTUP == "ROMRAM" ? "<pkgconf/mlt_powerpc_adder_romram.ldi>" : "<pkgconf/mlt_powerpc_adder_rom.ldi>" ]
          flavor data 
        }

        option CYGHWR_MEMORY_LAYOUT_H{
          display "Memory layout header file"
          calculated [CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_powerpc_adder_ram.h>" : CYG_HAL_STARTUP == "ROMRAM" ? "<pkgconf/mlt_powerpc_adder_romram.h>" : "<pkgconf/mlt_powerpc_adder_rom.h>" ]
          flavor data 
        }
      }
    }

    package CYGPKG_HAL_QUICC{
      display "Motorola MPC8xx PowerQUICC support"

      interface CYGNUM_HAL_QUICC_SMC1{
        display "SMC1 is available for serial I/O"
      }

      interface CYGNUM_HAL_QUICC_SMC2{
        display "SMC2 is available for serial I/O"
      }

      interface CYGNUM_HAL_QUICC_SCC1{
        display "SCC1 is available for serial I/O"
      }

      interface CYGNUM_HAL_QUICC_SCC2{
        display "SCC2 is available for serial I/O"
      }

      interface CYGNUM_HAL_QUICC_SCC3{
        display "SCC3 is available for serial I/O"
      }

      interface CYGNUM_HAL_QUICC_SCC4{
        display "SCC4 is available for serial I/O"
      }

      option CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS{
        display "Number of communication channels on the board"
        calculated [CYGNUM_HAL_QUICC_SMC1+CYGNUM_HAL_QUICC_SMC2+CYGNUM_HAL_QUICC_SCC1+CYGNUM_HAL_QUICC_SCC2+CYGNUM_HAL_QUICC_SCC3+CYGNUM_HAL_QUICC_SCC4 ]
        flavor data 
      }

      option CYGNUM_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL{
        display "Debug serial port"
        active_if [CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE ]
        legal_values [0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1 ]
        default_value [0 ]
        flavor data 
      }

      option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL{
        display "Diagnostic serial port"
        active_if [CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE ]
        legal_values [0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1 ]
        default_value [0 ]
        flavor data 
      }

      option CYGNUM_HAL_VIRTUAL_VECTOR_ROM_DEBUG_CHANNEL{
        display "Debug serial port used by ROM monitor"
        legal_values [0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1 ]
        default_value [0 ]
        flavor data 
      }

      option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_BAUD{
        display "Baud rate for the HAL diagnostic port"
        legal_values [50 75 110 "134_5" 150 200 300 600 1200 1800 2400 3600 4800 7200 9600 14400 19200 38400 57600 115200 230400 ]
        default_value [38400 ]
        flavor data 
      }
    }
  }
}

package CYGPKG_IO{
  display "I/O sub-system"
  requires [CYGPKG_ERROR ]

  option CYGDBG_IO_INIT{
    display "Debug I/O sub-system"
    default_value [0 ]
  }

  component CYGPKG_IO_FILE_SUPPORT{
    display "Basic support for file based I/O"
    active_if [!CYGPKG_IO_FILEIO ]
    default_value [1 ]

    option CYGPKG_IO_NFILE{
      display "Number of open files"
      default_value [16 ]
      flavor data 
    }
  }
}

package CYGPKG_INFRA{
  display "Infrastructure"

  component CYGPKG_INFRA_DEBUG{
    display "Asserts & Tracing"
    default_value [0 ]

    component CYGDBG_USE_ASSERTS{
      display "Use asserts"
      default_value [1 ]
      requires [1 == CYGINT_INFRA_DEBUG_TRACE_IMPL ]

      option CYGDBG_INFRA_DEBUG_PRECONDITIONS{
        display "Preconditions"
        default_value [1 ]
      }

      option CYGDBG_INFRA_DEBUG_POSTCONDITIONS{
        display "Postconditions"
        default_value [1 ]
      }

      option CYGDBG_INFRA_DEBUG_LOOP_INVARIANTS{
        display "Loop invariants"
        default_value [1 ]
      }

      option CYGDBG_INFRA_DEBUG_ASSERT_MESSAGE{
        display "Use assert text"
        default_value [1 ]
      }
    }

    component CYGDBG_USE_TRACING{
      display "Use tracing"
      default_value [0 ]
      requires [1 == CYGINT_INFRA_DEBUG_TRACE_IMPL ]

      option CYGDBG_INFRA_DEBUG_FUNCTION_REPORTS{
        display "Trace function reports"
        default_value [1 ]
      }

      option CYGDBG_INFRA_DEBUG_TRACE_MESSAGE{
        display "Use trace text"
        default_value [1 ]
      }
    }

    interface CYGINT_INFRA_DEBUG_TRACE_IMPL{
      display "Trace output implementations"
    }

    option CYGDBG_INFRA_DEBUG_TRACE_ASSERT_NULL{
      display "Null output"
      default_value [0 ]
      implements [CYGINT_INFRA_DEBUG_TRACE_IMPL ]
    }

    option CYGDBG_INFRA_DEBUG_TRACE_ASSERT_SIMPLE{
      display "Simple output"
      default_value [0 ]
      implements [CYGINT_INFRA_DEBUG_TRACE_IMPL ]
    }

    option CYGDBG_INFRA_DEBUG_TRACE_ASSERT_FANCY{
      display "Fancy output"
      default_value [0 ]
      implements [CYGINT_INFRA_DEBUG_TRACE_IMPL ]
    }

    component CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER{
      display "Buffered tracing"
      default_value [1 ]
      implements [CYGINT_INFRA_DEBUG_TRACE_IMPL ]

      option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE{
        display "Trace buffer size"
        active_if [CYGDBG_USE_TRACING ]
        default_value [32 ]
        legal_values [5 to 65535 ]
        flavor data 
      }

      option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_WRAP{
        display "Wrap trace buffer when full"
        active_if [CYGDBG_USE_TRACING ]
        default_value [1 ]
      }

      option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_HALT{
        display "Halt trace buffer when full"
        active_if [CYGDBG_USE_TRACING ]
        default_value [0 ]
      }

      option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT{
        display "Print trace buffer when full"
        active_if [CYGDBG_USE_TRACING ]
        default_value [0 ]
      }

      option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT_ON_ASSERT{
        display "Print trace buffer on assert fail"
        active_if [CYGDBG_USE_TRACING ]
        default_value [1 ]
      }
    }

    option CYGDBG_INFRA_DEBUG_FUNCTION_PSEUDOMACRO{
      display "Use function names"
      default_value [1 ]
    }
  }

  component CYGPKG_INFRA_STARTUP{
    display "Startup options"
    flavor none 

    option CYGSEM_START_UITRON_COMPATIBILITY{
      display "Start uITRON subsystem"
      default_value [0 ]
      requires [CYGPKG_UITRON ]
      active_if [CYGPKG_UITRON ]
    }
  }

  option CYGIMP_INFRA_PREFER_SMALL_TO_FAST_MEMCPY{
    display "Smaller slower memcpy()"
    default_value [0 ]
  }

  option CYGIMP_INFRA_PREFER_SMALL_TO_FAST_MEMSET{
    display "Smaller slower memset()"
    default_value [0 ]
  }

  option CYGFUN_INFRA_EMPTY_DELETE_FUNCTIONS{
    display "Provide empty C++ delete functions"
    default_value [1 ]
  }

  option CYGNUM_INFRA_EMPTY_DELETE_THRESHOLD{
    display "Threshold for valid number of delete calls"
    default_value [100 ]
    active_if [CYGPKG_INFRA_DEBUG ]
    flavor data 
  }

  option CYGFUN_INFRA_DUMMY_ABORT{
    display "Provide dummy abort() function"
    requires [!CYGINT_ISO_EXIT ]
    default_value [CYGINT_ISO_EXIT == 0 ]
  }

  option CYGSEM_INFRA_RESET_ON_TEST_EXIT{
    display "Reset platform at end of test case execution"
    default_value [0 ]
  }

  option CYGFUN_INFRA_DUMMY_STRLEN{
    display "Provide dummy strlen() function"
    requires [!CYGINT_ISO_STRING_STRFUNCS ]
    default_value [CYGINT_ISO_STRING_STRFUNCS == 0 ]
  }

  option CYGBLD_INFRA_CFLAGS_WARNINGS_AS_ERRORS{
    display "Make all compiler warnings show as errors"
    requires [is_substr(CYGBLD_GLOBAL_CFLAGS, " -Werror") ]
    default_value [0 ]
  }

  option CYGBLD_INFRA_CFLAGS_PIPE{
    display "Make compiler and assembler communicate by pipe"
    requires [is_substr(CYGBLD_GLOBAL_CFLAGS, " -pipe") ]
    default_value [0 ]
  }

  component CYGPKG_INFRA_OPTIONS{
    display "Infra build options"
    flavor none 

    option CYGPKG_INFRA_CFLAGS_ADD{
      display "Additional compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_INFRA_CFLAGS_REMOVE{
      display "Suppressed compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_INFRA_LDFLAGS_REMOVE{
      display "Suppressed linker flags"
      default_value ["-Wl,--gc-sections" ]
      flavor data 
    }

    option CYGPKG_INFRA_LDFLAGS_ADD{
      display "Additional linker flags"
      default_value ["-Wl,--fatal-warnings" ]
      flavor data 
    }

    component CYGPKG_INFRA_TESTS{
      display "Infra package tests"
      calculated ["tests/cxxsupp tests/diag_sprintf1 tests/diag_sprintf2" ]
      flavor data 

      option CYGNUM_TESTS_RUN_COUNT{
        display "Number of times a test runs"
        default_value [1 ]
        flavor data 
      }
    }
  }
}

package CYGPKG_ERROR{
  display "Common error code support"
  implements [CYGINT_ISO_ERRNO_CODES ]
  requires [CYGBLD_ISO_ERRNO_CODES_HEADER == "<cyg/error/codes.h>" ]

  component CYGPKG_ERROR_ERRNO{
    display "errno variable"
    implements [CYGINT_ISO_ERRNO ]
    requires [CYGBLD_ISO_ERRNO_HEADER == "<cyg/error/errno.h>" ]
    default_value [1 ]
    flavor bool 

    option CYGSEM_ERROR_PER_THREAD_ERRNO{
      display "Per-thread errno"
      requires [CYGVAR_KERNEL_THREADS_DATA ]
      default_value [1 ]
    }

    option CYGNUM_ERROR_ERRNO_TRACE_LEVEL{
      display "Tracing level"
      legal_values [0 to 1 ]
      default_value [0 ]
      flavor data 
    }
  }

  option CYGPKG_ERROR_STRERROR{
    display "strerror function"
    implements [CYGINT_ISO_STRERROR ]
    requires [CYGBLD_ISO_STRERROR_HEADER == "<cyg/error/strerror.h>" ]
    default_value [1 ]
    flavor bool 
  }

  component CYGPKG_ERROR_OPTIONS{
    display "Error package build options"
    flavor none 

    option CYGPKG_ERROR_CFLAGS_ADD{
      display "Additional compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_ERROR_CFLAGS_REMOVE{
      display "Suppressed compiler flags"
      default_value ["" ]
      flavor data 
    }
  }
}

package CYGPKG_ISOINFRA{
  display "ISO C and POSIX infrastructure"

  component CYGPKG_ISO_STARTUP{
    display "Startup and termination"
    flavor none 

    interface CYGINT_ISO_MAIN_STARTUP{
      display "main() startup implementations"
      requires [1 >= CYGINT_ISO_MAIN_STARTUP ]
    }

    interface CYGINT_ISO_ENVIRON{
      display "environ implementations"
      requires [1 >= CYGINT_ISO_ENVIRON ]
    }
  }

  component CYGPKG_ISO_CTYPE_H{
    display "ctype.h functions"
    flavor none 

    interface CYGINT_ISO_CTYPE{
      display "Number of implementations of ctype functions"
      requires [1 >= CYGINT_ISO_CTYPE ]
    }

    option CYGBLD_ISO_CTYPE_HEADER{
      display "Ctype implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_ERRNO{
    display "Error handling"
    flavor none 

    interface CYGINT_ISO_ERRNO_CODES{
      display "Number of implementations of error codes"
      requires [1 >= CYGINT_ISO_ERRNO_CODES ]
    }

    option CYGBLD_ISO_ERRNO_CODES_HEADER{
      display "Error codes implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_ERRNO{
      display "Number of implementations of errno variable"
      requires [1 >= CYGINT_ISO_ERRNO ]
    }

    option CYGBLD_ISO_ERRNO_HEADER{
      display "errno variable implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_LOCALE{
    display "Locale-related functions"
    flavor none 

    interface CYGINT_ISO_LOCALE{
      display "Number of implementations of locale functions"
      requires [1 >= CYGINT_ISO_LOCALE ]
    }

    option CYGBLD_ISO_LOCALE_HEADER{
      display "Locale implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_STDIO{
    display "Standard I/O-related functionality"
    flavor none 

    interface CYGINT_ISO_STDIO_FILETYPES{
      display "Number of implementations of stdio file types"
      requires [1 >= CYGINT_ISO_STDIO_FILETYPES ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_FILETYPES_HEADER{
      display "Stdio file types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_STREAMS{
      display "Stdio standard streams implementations"
      requires [1 >= CYGINT_ISO_STDIO_STREAMS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_STREAMS_HEADER{
      display "Stdio standard streams implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_FILEOPS{
      display "Number of implementations of stdio file operations"
      requires [1 >= CYGINT_ISO_STDIO_FILEOPS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_FILEOPS_HEADER{
      display "Stdio file operations implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_FILEACCESS{
      display "Number of implementations of stdio file access  functionals"
      requires [1 >= CYGINT_ISO_STDIO_FILEACCESS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_FILEACCESS_HEADER{
      display "Stdio file access implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_FORMATTED_IO{
      display "Number of implementations of stdio formatted I/O"
      requires [1 >= CYGINT_ISO_STDIO_FORMATTED_IO ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_FORMATTED_IO_HEADER{
      display "Stdio formatted I/O implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_CHAR_IO{
      display "Number of implementations of stdio character I/O"
      requires [1 >= CYGINT_ISO_STDIO_CHAR_IO ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_CHAR_IO_HEADER{
      display "Stdio character I/O implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_DIRECT_IO{
      display "Number of implementations of stdio direct I/O"
      requires [1 >= CYGINT_ISO_STDIO_DIRECT_IO ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_DIRECT_IO_HEADER{
      display "Stdio direct I/O implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_FILEPOS{
      display "Number of implementations of stdio file positioning"
      requires [1 >= CYGINT_ISO_STDIO_FILEPOS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_FILEPOS_HEADER{
      display "Stdio file positioning implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_ERROR{
      display "Number of implementations of stdio error handling"
      requires [1 >= CYGINT_ISO_STDIO_ERROR ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_ERROR_HEADER{
      display "Stdio error handling implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDIO_POSIX_FDFUNCS{
      display "POSIX fd-related function implementations"
      requires [1 >= CYGINT_ISO_STDIO_POSIX_FDFUNCS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDIO_POSIX_FDFUNCS_HEADER{
      display "POSIX fd-related function implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_STDLIB{
    display "Standard general utility functions"
    flavor none 

    interface CYGINT_ISO_STDLIB_STRCONV{
      display "String conversion function implementations"
      requires [1 >= CYGINT_ISO_STDLIB_STRCONV ]
    }

    option CYGBLD_ISO_STDLIB_STRCONV_HEADER{
      display "String conversion function implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDLIB_STRCONV_FLOAT{
      display "String to FP conversion function implementations"
      requires [1 >= CYGINT_ISO_STDLIB_STRCONV_FLOAT ]
    }

    option CYGBLD_ISO_STDLIB_STRCONV_FLOAT_HEADER{
      display "String to FP conversion function implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_RAND{
      display "Random number generator implementations"
      requires [1 >= CYGINT_ISO_RAND ]
    }

    option CYGBLD_ISO_RAND_HEADER{
      display "Random number generator implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_MALLOC{
      display "Malloc implementations"
      requires [1 >= CYGINT_ISO_MALLOC ]
    }

    option CYGBLD_ISO_MALLOC_HEADER{
      display "Malloc implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_MALLINFO{
      display "Mallinfo() implementations"
      requires [1 >= CYGINT_ISO_MALLINFO ]
    }

    option CYGBLD_ISO_MALLINFO_HEADER{
      display "Mallinfo() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_EXIT{
      display "Program exit functionality implementations"
      requires [1 >= CYGINT_ISO_EXIT ]
    }

    option CYGBLD_ISO_EXIT_HEADER{
      display "Program exit functionality implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDLIB_ENVIRON{
      display "Program environment implementations"
      requires [1 >= CYGINT_ISO_STDLIB_ENVIRON ]
    }

    option CYGBLD_ISO_STDLIB_ENVIRON_HEADER{
      display "Program environment implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDLIB_SYSTEM{
      display "system() implementations"
      requires [1 >= CYGINT_ISO_STDLIB_SYSTEM ]
    }

    option CYGBLD_ISO_STDLIB_SYSTEM_HEADER{
      display "system() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_BSEARCH{
      display "bsearch() implementations"
      requires [1 >= CYGINT_ISO_BSEARCH ]
    }

    option CYGBLD_ISO_BSEARCH_HEADER{
      display "bsearch() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_QSORT{
      display "qsort() implementations"
      requires [1 >= CYGINT_ISO_STDLIB_QSORT ]
    }

    option CYGBLD_ISO_QSORT_HEADER{
      display "qsort() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_ABS{
      display "abs()/labs() implementations"
      requires [1 >= CYGINT_ISO_STDLIB_ABS ]
    }

    option CYGBLD_ISO_STDLIB_ABS_HEADER{
      display "abs()/labs() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_DIV{
      display "div()/ldiv() implementations"
      requires [1 >= CYGINT_ISO_STDLIB_DIV ]
    }

    option CYGBLD_ISO_STDLIB_DIV_HEADER{
      display "div()/ldiv() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_STDLIB_MB_CUR_MAX_HEADER{
      display "Header defining the implementation's MB_CUR_MAX"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STDLIB_MULTIBYTE{
      display "Multibyte character implementations"
      requires [1 >= CYGINT_ISO_STDLIB_MULTIBYTE ]
    }

    option CYGBLD_ISO_STDLIB_MULTIBYTE_HEADER{
      display "Multibyte character implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_STRING{
    display "String functions"
    flavor none 

    interface CYGINT_ISO_STRERROR{
      display "Number of implementations of strerror() function"
      requires [1 >= CYGINT_ISO_STRERROR ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRERROR_HEADER{
      display "strerror() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_MEMCPY_HEADER{
      display "memcpy() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_MEMSET_HEADER{
      display "memset() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STRTOK_R{
      display "Number of implementations of strtok_r() function"
      requires [1 >= CYGINT_ISO_STRTOK_R ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRTOK_R_HEADER{
      display "strtok_r() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STRING_LOCALE_FUNCS{
      display "Number of implementations of locale-specific string  functions"
      requires [1 >= CYGINT_ISO_STRING_LOCALE_FUNCS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRING_LOCALE_FUNCS_HEADER{
      display "Locale-specific string functions' implementation  header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STRING_BSD_FUNCS{
      display "Number of implementations of BSD string functions"
      requires [1 >= CYGINT_ISO_STRING_BSD_FUNCS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRING_BSD_FUNCS_HEADER{
      display "BSD string functions' implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STRING_MEMFUNCS{
      display "Number of implementations of other mem*() functions"
      requires [1 >= CYGINT_ISO_STRING_MEMFUNCS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRING_MEMFUNCS_HEADER{
      display "Other mem*() functions' implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_STRING_STRFUNCS{
      display "Number of implementations of other ISO C str*()  functions"
      requires [1 >= CYGINT_ISO_STRING_STRFUNCS ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRING_STRFUNCS_HEADER{
      display "Other ISO C str*() functions' implementation  header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_TIME{
    display "Clock and time functionality"
    flavor none 

    option CYGBLD_ISO_TIME_T_HEADER{
      display "time_t implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_CLOCK_T_HEADER{
      display "clock_t implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_STRUCTTIMEVAL_HEADER{
      display "struct timeval implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_FNMATCH_HEADER{
      display "fnmatch implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_POSIX_TIMER_TYPES{
      display "Number of implementations of POSIX timer types"
      requires [1 >= CYGINT_ISO_POSIX_TIMER_TYPES ]
      flavor booldata 
    }

    option CYGBLD_ISO_POSIX_TIMER_TYPES_HEADER{
      display "POSIX timer types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_POSIX_CLOCK_TYPES{
      display "Number of implementations of POSIX clock types"
      requires [1 >= CYGINT_ISO_POSIX_CLOCK_TYPES ]
      flavor booldata 
    }

    option CYGBLD_ISO_POSIX_CLOCK_TYPES_HEADER{
      display "POSIX clock types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_C_TIME_TYPES{
      display "Number of implementations of ISO C types"
      requires [1 >= CYGINT_ISO_C_TIME_TYPES ]
      flavor booldata 
    }

    option CYGBLD_ISO_C_TIME_TYPES_HEADER{
      display "ISO C time types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_POSIX_TIMERS{
      display "Number of implementations of POSIX timers"
      requires [1 >= CYGINT_ISO_POSIX_TIMERS ]
      flavor booldata 
    }

    option CYGBLD_ISO_POSIX_TIMERS_HEADER{
      display "POSIX timer implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_POSIX_CLOCKS{
      display "Number of implementations of POSIX clocks"
      requires [1 >= CYGINT_ISO_POSIX_CLOCKS ]
      flavor booldata 
    }

    option CYGBLD_ISO_POSIX_CLOCKS_HEADER{
      display "POSIX clocks implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_C_CLOCK_FUNCS{
      display "Number of implementations of ISO C clock functions"
      requires [1 >= CYGINT_ISO_C_CLOCK_FUNCS ]
      flavor booldata 
    }

    option CYGBLD_ISO_C_CLOCK_FUNCS_HEADER{
      display "ISO C clock functions' implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_TZSET{
      display "Number of implementations of tzset() function"
      requires [1 >= CYGINT_ISO_TZSET ]
      flavor booldata 
    }

    option CYGBLD_ISO_TZSET_HEADER{
      display "tzset() implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_SIGNAL{
    display "Signal functionality"
    flavor none 

    interface CYGINT_ISO_SIGNAL_NUMBERS{
      display "Number of implementations of signal numbers"
      requires [1 >= CYGINT_ISO_SIGNAL_NUMBERS ]
    }

    option CYGBLD_ISO_SIGNAL_NUMBERS_HEADER{
      display "Signal numbering implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_SIGNAL_IMPL{
      display "Number of signal implementations"
      requires [1 >= CYGINT_ISO_SIGNAL_IMPL ]
    }

    option CYGBLD_ISO_SIGNAL_IMPL_HEADER{
      display "Signals implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_POSIX_REALTIME_SIGNALS{
      display "POSIX real time signals feature test macro"
      requires [1 >= CYGINT_POSIX_REALTIME_SIGNALS ]
    }
  }

  component CYGPKG_ISO_SETJMP{
    display "Non-local jumps functionality"
    flavor none 

    interface CYGINT_ISO_SETJMP{
      display "setjmp() / longjmp() implementations"
      requires [1 >= CYGINT_ISO_SETJMP ]
    }

    option CYGBLD_ISO_SETJMP_HEADER{
      display "setjmp() / longjmp() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_SIGSETJMP{
      display "sigsetjmp() / siglongjmp() implementations"
      requires [1 >= CYGINT_ISO_SIGSETJMP ]
    }

    option CYGBLD_ISO_SIGSETJMP_HEADER{
      display "sigsetjmp() / siglongjmp() implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  option CYGBLD_ISO_ASSERT_HEADER{
    display "Assertions implementation header"
    default_value [0 ]
    flavor booldata 
  }

  component CYGPKG_ISO_POSIX_FCNTL{
    display "POSIX file control"
    flavor none 

    option CYGBLD_ISO_OFLAG_HEADER{
      display "POSIX open flags implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_FCNTL{
      display "POSIX fcntl() implementations"
      requires [1 >= CYGINT_ISO_FCNTL ]
    }

    option CYGBLD_ISO_FCNTL_HEADER{
      display "POSIX fcntl() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_OPEN{
      display "POSIX file open implementations"
      requires [1 >= CYGINT_ISO_OPEN ]
    }

    option CYGBLD_ISO_OPEN_HEADER{
      display "POSIX file open implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  option CYGBLD_ISO_STAT_DEFS_HEADER{
    display "<sys/stat.h> definitions implementation header"
    default_value [0 ]
    flavor booldata 
  }

  interface CYGINT_ISO_DIRENT{
    display "POSIX directory reading implementation"
    requires [1 >= CYGINT_ISO_DIRENT ]
  }

  option CYGBLD_ISO_DIRENT_HEADER{
    display "<dirent.h> definitions implementation header"
    default_value [0 ]
    flavor booldata 
  }

  component CYGPKG_ISO_POSIX_TYPES{
    display "POSIX <sys/types.h> contents"
    flavor none 

    interface CYGINT_ISO_PTHREADTYPES{
      display "POSIX thread types implementations"
      requires [1 >= CYGINT_ISO_PTHREADTYPES ]
    }

    option CYGBLD_ISO_PTHREADTYPES_HEADER{
      display "POSIX thread types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_PMUTEXTYPES{
      display "POSIX mutex types implementations"
      requires [1 >= CYGINT_ISO_PTHREADTYPES ]
    }

    option CYGBLD_ISO_PMUTEXTYPES_HEADER{
      display "POSIX mutex types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_SSIZE_T_HEADER{
      display "ssize_t implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_FSTYPES_HEADER{
      display "Filesystem types implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_SCHEDTYPES_HEADER{
      display "gid_t, pid_t, uid_t implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_EXTRA_TYPES{
    display "Non-POSIX <sys/types.h> contents"
    flavor none 

    interface CYGINT_ISO_BSDTYPES{
      display "BSD compatible types"
      requires [1 >= CYGINT_ISO_BSDTYPES ]
    }

    option CYGBLD_ISO_BSDTYPES_HEADER{
      display "BSD types header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_UTSNAME{
    display "Utsname structure"
    flavor none 

    option CYGBLD_ISO_UTSNAME_HEADER{
      display "Utsname header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_SCHED{
    display "POSIX scheduler"
    flavor none 

    interface CYGINT_ISO_SCHED_IMPL{
      display "POSIX scheduler implementations"
      requires [1 >= CYGINT_ISO_SCHED_IMPL ]
    }

    option CYGBLD_ISO_SCHED_IMPL_HEADER{
      display "POSIX scheduler implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_SEMAPHORES{
    display "POSIX semaphores"
    flavor none 

    interface CYGINT_ISO_SEMAPHORES{
      display "POSIX semaphore implementations"
      requires [1 >= CYGINT_ISO_SEMAPHORES ]
    }

    option CYGBLD_ISO_SEMAPHORES_HEADER{
      display "POSIX semaphore implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_MQUEUE{
    display "POSIX message queues"
    flavor none 

    interface CYGINT_ISO_MQUEUE{
      display "Implementations"
      requires [1 >= CYGINT_ISO_MQUEUE ]
    }

    option CYGBLD_ISO_MQUEUE_HEADER{
      display "Implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGNUM_ISO_MQUEUE_OPEN_MAX{
      display "Maximum number of open message queues"
      active_if [CYGINT_ISO_MQUEUE ]
      default_value [CYGNUM_POSIX_MQUEUE_OPEN_MAX > 0 ? CYGNUM_POSIX_MQUEUE_OPEN_MAX : 0 ]
      flavor booldata 
    }

    option CYGNUM_ISO_MQUEUE_PRIO_MAX{
      display "Maximum number of message priorities"
      default_value [65535 ]
      active_if [CYGINT_ISO_MQUEUE ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_PTHREAD{
    display "POSIX threads"
    flavor none 

    interface CYGINT_ISO_PTHREAD_IMPL{
      display "POSIX pthread implementations"
      requires [1 >= CYGINT_ISO_PTHREAD_IMPL ]
      flavor booldata 
    }

    option CYGBLD_ISO_PTHREAD_IMPL_HEADER{
      display "POSIX pthread implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_PTHREAD_MUTEX{
      display "POSIX mutex/cond var implementations"
      requires [1 >= CYGINT_ISO_PTHREAD_MUTEX ]
      flavor booldata 
    }

    option CYGBLD_ISO_PTHREAD_MUTEX_HEADER{
      display "POSIX mutex/cond var implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_LIMITS{
    display "Limits"
    flavor none 

    interface CYGINT_ISO_POSIX_LIMITS{
      display "POSIX pthread limits implementations"
      requires [1 >= CYGINT_ISO_POSIX_LIMITS ]
    }

    option CYGBLD_ISO_POSIX_LIMITS_HEADER{
      display "POSIX pthread limits implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_OPEN_MAX_HEADER{
      display "OPEN_MAX implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_LINK_MAX_HEADER{
      display "LINK_MAX implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_NAME_MAX_HEADER{
      display "NAME_MAX implementation header"
      default_value [0 ]
      flavor booldata 
    }

    option CYGBLD_ISO_PATH_MAX_HEADER{
      display "PATH_MAX implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_TERMIOS{
    display "POSIX termios"
    flavor none 

    interface CYGINT_ISO_TERMIOS{
      display "POSIX termios implementations"
      requires [1 >= CYGINT_ISO_TERMIOS ]
    }

    option CYGBLD_ISO_TERMIOS_HEADER{
      display "POSIX termios implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_DLFCN{
    display "Dynamic load API"
    flavor none 

    interface CYGINT_ISO_DLFCN{
      display "Dynamic load implementations"
      requires [1 >= CYGINT_ISO_DLFCN ]
    }

    option CYGBLD_ISO_DLFCN_HEADER{
      display "Dynamic load implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_UNISTD{
    display "UNIX standard functions"
    flavor none 

    interface CYGINT_ISO_POSIX_TIMER_OPS{
      display "POSIX timer operations implementations"
      requires [1 >= CYGINT_ISO_POSIX_TIMER_OPS ]
      flavor booldata 
    }

    option CYGBLD_ISO_POSIX_TIMER_OPS_HEADER{
      display "POSIX timer operations implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_POSIX_SLEEP{
      display "POSIX sleep() implementations"
      requires [1 >= CYGINT_ISO_POSIX_SLEEP ]
      flavor booldata 
    }

    option CYGBLD_ISO_POSIX_SLEEP_HEADER{
      display "POSIX sleep() implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_SELECT{
    display "select()/poll() functions"
    flavor none 

    interface CYGINT_ISO_SELECT{
      display "select() implementations"
      requires [1 >= CYGINT_ISO_SELECT ]
      flavor booldata 
    }

    option CYGBLD_ISO_SELECT_HEADER{
      display "select() implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_POLL{
      display "poll() implementations"
      requires [1 >= CYGINT_ISO_POLL ]
      flavor booldata 
    }

    option CYGBLD_ISO_POLL_HEADER{
      display "poll() implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISO_NETDB{
    display "NetDB utility functions"
    flavor none 

    interface CYGINT_ISO_DNS{
      display "DNS implementations"
      requires [1 >= CYGINT_ISO_DNS ]
      flavor bool 
    }

    option CYGBLD_ISO_DNS_HEADER{
      display "DNS implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_NETDB_PROTO{
      display "Protocol network database implementations"
      requires [1 >= CYGINT_ISO_NETDB_PROTO ]
      flavor bool 
    }

    option CYGBLD_ISO_NETDB_PROTO_HEADER{
      display "Protocol network database implementation header"
      default_value [0 ]
      flavor booldata 
    }

    interface CYGINT_ISO_NETDB_SERV{
      display "Services network database implementations"
      requires [1 >= CYGINT_ISO_NETDB_SERV ]
      flavor bool 
    }

    option CYGBLD_ISO_NETDB_SERV_HEADER{
      display "Services network database implementation header"
      default_value [0 ]
      flavor booldata 
    }
  }

  component CYGPKG_ISOINFRA_OPTIONS{
    display "Build options"
    flavor none 

    option CYGPKG_ISOINFRA_CFLAGS_ADD{
      display "Additional compiler flags"
      default_value ["" ]
      flavor data 
    }

    option CYGPKG_ISOINFRA_CFLAGS_REMOVE{
      display "Suppressed compiler flags"
      default_value ["" ]
      flavor data 
    }
  }
}
